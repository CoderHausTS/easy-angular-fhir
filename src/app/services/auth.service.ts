import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { ConformanceParserService } from './conformance-parser.service';
import { AppConfigService } from './app-config.service';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private authorizationURL;
  private authorizeCode;
  private token;

  constructor(
    private http: HttpClient,
    private conformanceService: ConformanceParserService,
    private appConfigService: AppConfigService
  ) {
    this.authorizationURL = this.conformanceService.getAuthorizationURL();
    console.log('authURL is ', this.authorizationURL);
  }

  fetchAuthorizationCode() {
    const responseType = 'code';
    const clientID = AppConfigService.settings.fhir.clientId;
    const redirectURI = AppConfigService.settings.fhir.redirectUrl;

    const params = new HttpParams({
      fromString: `response_type=${responseType}&client_id=${clientID}&redirect_uri=${redirectURI}`,
    });

    console.log('going in! ');
    console.log('params ', params);
    this.http.get('https://www.google.com').subscribe(data => {console.log('the datum ', data); } );
    // this.http
    //   .get(this.authorizationURL, { params })
    //   .subscribe((authCode) => {(this.authorizeCode = authCode); console.log('in http ', authCode); });

  }

  // we then get back the auth code
  // code: This parameter contains the authorization code generated by Epic.
  // http://localhost:8000?code=l7LJWdznuuA9oZw+JCNsG70ewv0AzxOD2MI1yGwg

  // exchange the code for a token
  // HTTP POST to the token service
  // needs these params
  // grant_type: In Epic's OAuth 2.0 implementation, this parameter always contains the value authorization_code.
  // code: This parameter contains the authorization code sent from Epic's authorization server to your application
  // as a query parameter on the redirect URI as described above.
  // redirect_uri: This parameter must contain the same redirect URI that you provided in the initial access request.
  // client_id: This parameter must contain the applicationâ€™s client ID issued by Epic that you provided in the intial request.
  // POST https://open-ic.epic.com/argonaut/oauth2/token HTTP/1.1
  // Content-Type: application/x-www-form-urlencoded
  // grant_type=authorization_code&code=QY4IDRFBZOPtYenTOADbBrBUTF
  // &redirect_uri=http://localhost:8000&client_id=324C2091A1CB4A319FBB3FC805863F0A
  fetchAuthorizationToken() {}

  // we then get back the token
  // it contains a json object with the following
  // access_token: This parameter contains the access token issued by Epic to your application and is used in future requests.
  // token_type: In Epic's OAuth 2.0 implementation, this parameter always includes the value bearer.
  // expires_in: This parameter contains the number of seconds for which the access token is valid.
  // scope: This parameter describes the access your application is authorized for.
  // {
  //       "access_token": "Ft2FxQoCRMYtyvtbBE29yEbaOjKKdLBVWeT\/cGGOwbPTPtJz0KPLPSsWkjcHMG",
  //       "token_type": "bearer",
  //       "expires_in": 3240,
  //       "scope": "* ",
  //       "patient": "Tbt3KuCY0B5PSrJvCu2j-PlK.aiHsu2xUjUM8bWpetXoB"
  //     }

  // With this, we can get our data!!!!
  // Queries must contain an Authorization header that includes the access token presented as a bearer token.
  // https://open-ic.epic.com/argonaut/api/FHIR/Argonaut/Patient/Tbt3KuCY0B5PSrJvCu2j-PlK.aiHsu2xUjUM8bWpetXoB
  // Authorization: Bearer Ft2FxQoCRMYtyvtbBKdLBVWeT/cGGOwbPTPtJz0KPLPSsWkjcHMG
  getToken() {}
}

// https://open.epic.com/Tutorial/PatientAuthentication
// https://open.epic.com/Tutorial/OAuth
// https://open.epic.com/MyApps/Endpoints
